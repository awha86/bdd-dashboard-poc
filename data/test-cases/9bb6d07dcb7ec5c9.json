{"uid":"9bb6d07dcb7ec5c9","name":"test_basic_addition","fullName":"tests.test_example#test_basic_addition","historyId":"2d12d6d5fb792f388c7449c02e740ddc","time":{"start":1749734266441,"stop":1749734266442,"duration":1},"description":"/home/runner/work/bdd-test-poc/bdd-test-poc/features/example.feature: Basic addition","descriptionHtml":"<p>/home/runner/work/bdd-test-poc/bdd-test-poc/features/example.feature: Basic addition</p>\n","status":"failed","statusMessage":"AssertionError: assert 3 == 2","statusTrace":"fixturefunc = <function _ at 0x7f6d505ec860>\nrequest = <FixtureRequest for <Function test_basic_addition>>\nkwargs = {'result': 3}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if inspect.isgeneratorfunction(fixturefunc):\n            fixturefunc = cast(Callable[..., Generator[FixtureValue]], fixturefunc)\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n                             ^^^^^^^^^^^^^^^^^^^^^\n\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/fixtures.py:929: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresult = 3\n\n    @then(\"the result should be 2\")\n    def _(result):\n>       assert result == 2\nE       assert 3 == 2\n\ntests/test_example.py:19: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_pytest_bdd_example","time":{"start":1749734266440,"stop":1749734266440,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"numbers","time":{"start":1749734266441,"stop":1749734266441,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"result","time":{"start":1749734266442,"stop":1749734266442,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_example"},{"name":"host","value":"fv-az1711-947"},{"name":"thread","value":"1854-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_example"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"9bb6d07dcb7ec5c9.json","parameterValues":[]}